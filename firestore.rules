rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Função helper para verificar autenticação
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função helper para verificar propriedade
    function isOwner(resource) {
      return resource.data.ownerId == request.auth.uid;
    }

    // Função helper para verificar dados de criação
    function hasValidOwner() {
      return request.resource.data.ownerId == request.auth.uid;
    }

    // Função helper para validar campos obrigatórios do cliente
    function hasValidCustomerFields() {
      let data = request.resource.data;
      return data.fullName is string &&
             data.phone is string &&
             data.ownerId is string &&
             data.active is bool &&
             data.points is number;
    }

    match /customers/{customerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource);
    }

    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasValidOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    match /appointments/{appointmentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasValidOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource == null || isOwner(resource)
      );
      allow create: if isAuthenticated() && hasValidOwner();
      allow update, delete: if isAuthenticated() && isOwner(resource);
    }

    match /settings/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /profiles/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /analytics/{eventId} {
      allow read: if isAuthenticated() && (
        resource == null || isOwner(resource)
      );
      allow create: if isAuthenticated() && hasValidOwner();
      allow update: if false; // Eventos são imutáveis
      allow delete: if false; // Não permitir deleção
    }

    match /pending_operations/{opId} {
      allow read: if isAuthenticated() && (
        resource == null || isOwner(resource)
      );
      allow create: if isAuthenticated() && hasValidOwner();
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }

    match /business_hours/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /loyalty_config/{userId} {
      allow read, write: if isAuthenticated();
    }

    match /loyalty_points/{clientId} {
      allow read, write: if isAuthenticated();
    }

    match /points_history/{historyId} {
      allow read, write: if isAuthenticated();
    }

    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        resource == null || isOwner(resource)
      );
      allow create: if isAuthenticated() && hasValidOwner();
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }

    match /expenses/{expenseId} {
      allow read: if isAuthenticated() && (
        resource == null || isOwner(resource)
      );
      allow create: if isAuthenticated() && hasValidOwner();
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }

    match /financial_categories/{categoryId} {
      allow read: if isAuthenticated() && (
        resource == null || isOwner(resource)
      );
      allow create: if isAuthenticated() && hasValidOwner();
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }

    // Regras para o histórico de backups
    match /backup_history/{historyId} {
      allow read: if isAuthenticated() && (
        resource == null || resource.data.ownerId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // Regras para a configuração de backup
    match /backup_config/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
} 